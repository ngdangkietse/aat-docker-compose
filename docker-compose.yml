version: "3.9"

services:
  # postgres
  postgres:
    container_name: aat-postgres
    image: postgres:16-alpine
    restart: unless-stopped
    ports:
      - "5432:5432"
    env_file:
      - .env
    volumes:
      - aat-postgres:/var/lib/postgresql/data
    networks:
      - aat-network

  # minio
  minio:
    container_name: aat-minio
    image: minio/minio
    restart: unless-stopped
    ports:
      - "9000:9000"
      - "9001:9001"
    volumes:
      - minio-storage:/data
    environment:
      MINIO_ACCESS_KEY: blQ3xwyhmgVSil41otTG
      MINIO_SECRET_KEY: bnlnY6BYVls7BVOIAhj7LUKF5htiTRkJG4RhdMQJ
    command: server --console-address ":9001" /data
    networks:
      - aat-network

  # redis
  redis:
    container_name: aat-redis
    image: redis:7.2-alpine
    restart: unless-stopped
    ports:
      - "6379:6379"
    command: redis-server --loglevel warning
    healthcheck:
      test: [ "CMD-SHELL", "redis-cli ping | grep PONG" ]
      interval: 5s
      timeout: 3s
      retries: 5
    networks:
      - aat-network

  # zookeeper
  zookeeper:
    container_name: aat-zookeeper
    image: debezium/zookeeper:2.5.0.Final
    restart: unless-stopped
    ports:
      - "2181:2181"
      - "2888:2888"
      - "3888:3888"
    environment:
      LOG_LEVEL: WARN
    networks:
      - aat-network

  # kafka
  kafka:
    container_name: aat-kafka
    image: debezium/kafka:2.5.0.Final
    restart: unless-stopped
    ports:
      - "9092:9092"
      - "29092:29092"
    environment:
      BROKER_ID: 1
      ZOOKEEPER_CONNECT: zookeeper:2181
      KAFKA_LISTENERS: PLAINTEXT://aat-kafka:29092,PLAINTEXT_HOST://aat-kafka:9092
      KAFKA_ADVERTISED_LISTENERS: PLAINTEXT://aat-kafka:29092,PLAINTEXT_HOST://localhost:9092
      KAFKA_LISTENER_SECURITY_PROTOCOL_MAP: PLAINTEXT:PLAINTEXT,PLAINTEXT_HOST:PLAINTEXT
      KAFKA_INTER_BROKER_LISTENER_NAME: "PLAINTEXT"
      KAFKA_LOG_RETENTION_HOURS: 24
      KAFKA_MESSAGE_MAX_BYTES: 4194304
      KAFKA_AUTO_CREATE_TOPICS_ENABLE: "true"
      LOG_LEVEL: WARN
      CREATE_TOPICS: debezium_connect_config:1:1:compact,debezium_connect_offset:1:1:compact,debezium_connect_status:1:1:compact
    depends_on:
      zookeeper:
        condition: service_started
    healthcheck:
      test:
        [
          "CMD",
          "./bin/kafka-topics.sh",
          "--list",
          "--bootstrap-server",
          "aat-kafka:29092"
        ]
      interval: 10s
      timeout: 5s
      retries: 5
    networks:
      - aat-network

  # kafka ui
  kafka-ui:
    container_name: aat-kafka-ui
    image: tchiotludo/akhq:0.24.0
    restart: unless-stopped
    ports:
      - "8082:8080"
    environment:
      AKHQ_CONFIGURATION: |
        akhq:
          connections:
            docker-kafka-server:
              properties:
                bootstrap.servers: "aat-kafka:29092"

  # debezium
  cdc:
    container_name: aat-cdc
    image: debezium/connect:2.5.0.Final
    restart: unless-stopped
    ports:
      - "8083:8083"
    environment:
      BOOTSTRAP_SERVERS: aat-kafka:29092
      CONFIG_STORAGE_TOPIC: debezium_connect_config
      OFFSET_STORAGE_TOPIC: debezium_connect_offset
      STATUS_STORAGE_TOPIC: debezium_connect_status
      LOG_LEVEL: WARN
    healthcheck:
      test: [ "CMD", "curl", "-f", "http://localhost:8083/connectors" ]
      interval: 10s
      timeout: 5s
      retries: 5
    depends_on:
      kafka:
        condition: service_healthy
    networks:
      - aat-network

volumes:
  aat-postgres:
    driver: local
  minio-storage: { }

networks:
  aat-network:
    driver: bridge